dnl $1 = Message, $2 = senderThreadID, $3 = messageID $4 = RuleName
define(OutEnc, <!Out_$4($1, $2, $3)!>)
dnl $1 = RuleName, $2 = Auth or Supp
define(EncryptionRule, 
<!dnl
rule OutRule_Enc_$1 [color=ffd447]:
    let PTK = KDF(<PMK, ANonce, SNonce>)
 		nonce = <N(n), ~senderID, $3>
		newNonce = <N(n+'1'), ~senderID, $3>
	in
    [ Out_$1(message, ~senderThreadID, ~messageID)
    , $2SenderPTK(~ptkID, ~senderThreadID, ~senderID, PTK, nonce) ]
    --[ EncryptedWithPTK(~ptkID, ~senderThreadID, ~senderID, PTK, newNonce)
      , $2EncryptedWithPTK(~ptkID, ~senderThreadID, ~senderID, PTK, newNonce)
      , SendMessage(~senderThreadID, ~messageID) ]->
    [ Out(snenc(message, PTK, newNonce))
    , $2SenderPTK(~ptkID, ~senderThreadID, ~senderID, PTK, newNonce) ]
!>)

define(PlainRule,
<!dnl
rule OutRule_$1 [color=ffffff]:
	[ Out_$1(message, ~senderThreadID, ~messageID) ]
	--[ SendMessage(~senderThreadID, ~messageID) ]->
	[ Out(message) ]dnl
!>)

define(OutEncRuleDataFrame,
<!dnl
EncryptionRule($1, $2, kDataFrame)
ifelse($3, only_encrypted, , PlainRule($1))
!>)

define(OutEncRuleManagementFrame,
<!dnl
EncryptionRule($1, $2, kManagementFrame)
ifelse($3, only_encrypted, , PlainRule($1))
!>)

define(SendPTKEncryptedPayloadRule,
<!dnl
rule sendPTKEncryptedPayload_$1 [color=ffd447]:
    let PTK = KDF(<PMK, ANonce, SNonce>) 
		dfNonce = <N(n), ~senderID, kDataFrame>
		newDfNonce = <N(n+'1'), ~senderID, kDataFrame>
	in
    [ $1SenderPTK(~ptkID, ~senderThreadID, ~senderID, PTK, dfNonce) ]
    --[ EncryptedWithPTK(~ptkID, ~senderThreadID, ~senderID, PTK, newDfNonce)
      , $1EncryptedWithPTK(~ptkID, ~senderThreadID, ~senderID, PTK, newDfNonce)
      , SendPTKEncryptedPayload(~ptkID, ~senderThreadID, ~senderID, 
                                PTK, newDfNonce) ]->
    [ Out(snenc(<'data', $message>, PTK, newDfNonce))
    , $1SenderPTK(~ptkID, ~senderThreadID, ~senderID, PTK, newDfNonce) ]
!>)

SendPTKEncryptedPayloadRule(Auth)

SendPTKEncryptedPayloadRule(Supp)

define(InEnc, <!In_$4($1, $2, $3)!>)

define(ReceivePlainRule,
<!dnl
rule Receive_Clear_Message_$1 [color=ffffff]:
    [ In(message)
    , !$1ReceiverPTK(~ptkID, ~receiverThreadID, ~receiverID, kNullPTK,
                     ~pointerPTK) ]
    --[ Read(~pointerPTK) ]->
    [ InEnc(message, ~receiverThreadID, kNullPTK, $1) ]
!>)

define(ReceiveEncryptedRule,
<!dnl
rule Receive_Encrypted_Message_$1 [color=ffd447]:
    let 
        PTK = KDF(<PMK, ANonce, SNonce>) 
        nonce = <N(n), senderID, frameType>
    in
    [ In(snenc(message, PTK, nonce))
    , !$1ReceiverPTK(~ptkID, ~receiverThreadID, ~receiverID, PTK,
                     ~pointerPTK)[no_precomp] ]
    --[ Neq(PTK, kNullPTK)
      , SeesNonceForPTK(~ptkID, ~receiverThreadID, 
                        PTK, nonce)
      , Read(~pointerPTK) ]->
    [ InEnc(message, ~receiverThreadID, PTK, $1) ]
!>)


ReceivePlainRule(Auth)

ReceivePlainRule(Supp)

ReceiveEncryptedRule(Auth)

ReceiveEncryptedRule(Supp)


